local outputDir = "./"
local file = nil
local function PrintTable1(vecDatas)
    print("lua table elements:")
    for tKey, tValue in pairs(vecDatas) do
        print("\t "..tKey.." => "..tValue)
    end
end
local function tablelength(T)
    local count = 0
    for _ in pairs(T) do count = count + 1 end
    return count
end

local function writeln(str)
    if str ~= nil then
        file:write(str, "\n")
    else
        file:write("\n")
    end
end
local function camelCase(s)
	return string.gsub(s, "_%w+", function(word)
		local first = string.sub(word, 2, 2)
		local rest = string.sub(word, 3)
		return string.upper(first) .. rest
	end)
end
local function CamelCase(s)
    local camel = camelCase(s)
    print("camel:"..camel)
    return (camel:gsub("^%l", string.upper))
end

function ProcessOneSheet(xlsxName, sheetName, vecNames, vecTypes, vecDescriptions)
    print("xlsxName:" .. xlsxName)
    print("sheetName:" .. sheetName)
    PrintTable1(vecNames)
    PrintTable1(vecTypes)
    PrintTable1(vecDescriptions)

    -- 取count的最小值
    local count1 = tablelength(vecNames)
    local count2 = tablelength(vecTypes)
    local count3 = tablelength(vecDescriptions)
    local count = math.min(count1, count2)
    count = math.min(count, count3)

    file = io.open (outputDir ..sheetName..".go", "w+")

    writeln("// Code generated by little bull tool. DO NOT EDIT!!!")
    writeln()
    writeln("package DataTables")
    writeln()
    writeln("type "..sheetName.." struct {")

    for idx=1,count do
        local cname = vecNames[idx]
        local ctype = vecTypes[idx]
        local cdesc = vecDescriptions[idx]
        if cname ~= nil and cname ~= "" and ctype ~= nil and ctype ~= "" then
            writeln("\t"..CamelCase(cname).." "..ctype.."  `db_col_name:\""..cname.."\"` // "..cdesc)
        end
    end
    writeln("}")
    writeln()

    writeln("type "..sheetName.."_Data struct {")

    writeln("\t"..sheetName.."Items map[uint32]*"..sheetName.."")

    writeln("}")
    writeln()

    writeln("func (dt *"..sheetName.."_Data)MakeMap(){")

    writeln("\tdt."..sheetName.."Items = make(map[uint32]*"..sheetName..")")

    writeln("}")
    writeln()

    writeln("func init() {")
    writeln("\tregister(\""..sheetName.."\", &"..sheetName.."_Data{}, &"..sheetName.."{},")
    writeln("\t\tfunc(dt interface{}, bt interface{}) {")
    writeln("\t\t\tdt.(*"..sheetName.."_Data)."..sheetName.."Items[bt.(*"..sheetName..").Id] = bt.(*"..sheetName..")")
    writeln("\t\t})")
    writeln("}")
    writeln()

    writeln("func Get"..sheetName.."() *"..sheetName.."_Data {")
    writeln("\treturn get(\""..sheetName.."\").(*"..sheetName.."_Data)")
    writeln("}")
    
    io.close(file)
    return 0
end
